# ==============================================================================
# Context7 AI Agent - Production Docker Compose
# ==============================================================================

version: '3.8'

services:
  context7-agent:
    image: context7/agent:2.0.0
    container_name: context7-prod
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONTEXT7_DEFAULT_THEME=${CONTEXT7_DEFAULT_THEME:-cyberpunk}
      - CONTEXT7_MAX_HISTORY=${CONTEXT7_MAX_HISTORY:-100}
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - context7_data:/app/data
      - context7_logs:/app/logs
    networks:
      - context7_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.insert(0, 'src'); from config import config; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.context7.rule=Host(`context7.yourdomain.com`)"
      - "traefik.http.routers.context7.tls.certresolver=letsencrypt"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: context7-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - context7_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: context7-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - context7-agent
    networks:
      - context7_network
    restart: always

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: context7-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - context7_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: context7-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - context7_network
    restart: always
    depends_on:
      - prometheus

volumes:
  context7_data:
    driver: local
  context7_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  context7_network:
    driver: bridge
